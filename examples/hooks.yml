timeout: 3000
onInit:
  store:
    sequence: "'task::onInit'"
  assertions:
    - name: Tasks exists onInit
      expectToBeDefined: task.name
    - expect: this.name
      toBeEqualTo: task.name
actuators:
  - type: tcp
    timeout: 2000
    serverAddress: localhost
    port: 23080
    payload: it
    onInit:
      script: actuator.name = 'changed';
      store:
        sequence: store.sequence + "'-> actuator::onInit'"
      assertions:
        - name: Actuator exists onInit
          expectToBeDefined: actuator
        - name: Actuator name
          expectToBeDefined: actuator.name
        - expectToBeDefined: actuator
        - expectToBeDefined: this.name
        - expect: this.name
          toBeEqualTo: actuator.name
    onMessageReceived:
      store:
        sequence: store.sequence + "'-> actuator::onMessageReceived'"
      assertions:
        - name: Actuator exists onMessageReceived
          expectToBeDefined: actuator
        - name: Task onInit
          expect: store.sequence
          toContain: "'task::onInit'"
        - name: Actuator name changed
          expect: actuator.name
          toBeEqualTo: "'changed'"
        - name: Actuator onInit executed
          expect: store.sequence
          toContain: "'actuator::onInit'"
sensors:
  - type: tcp
    port: 23080
    response: hook response
    onInit:
      script: sensor.name = 'changed';
      store:
        sequence: store.sequence + "'-> sensor::onInit'"
      assertions:
        - name: Sensor exists onInit
          expectToBeDefined: sensor
        - expect: this.name
          toBeEqualTo: sensor.name
        - name: Sensor name
          expect: sensor.name
          toBeEqualTo: "'changed'"
    onMessageReceived:
      assertions:
        - name: Sensor exists onMessageReceived
          expectToBeDefined: sensor
        - name: Sensor name changed
          expect: sensor.name
          toBeEqualTo: "'changed'"
        - name: Sensor onInit executed
          expect: store.sequence
          toContain: "'sensor::onInit'"
